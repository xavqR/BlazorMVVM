@page "/counter"
@implements IDisposable

@using Infrastructure.MVVM

@inject ICounterFactory counterFactory

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @counterVM.CurrentCounter</p>

<CommandButton Class="btn btn-primary" Text="Click Me" Command=@counterVM.IncrementCountCommand Receiver=this />

@code
{
    private IVMDataSource counterVMDataSource;
    private CounterVM counterVM;  

    protected override async Task OnInitializedAsync()
    {       
        CounterInfrastructure counterInfrastructure = this.counterFactory.Create();
        this.counterVM = counterInfrastructure.CounterVM;
        this.counterVMDataSource = counterInfrastructure.CounterVMDataSource;
        counterInfrastructure.CounterVMInitializer.Initialize();

        await base.OnInitializedAsync();
    }

    #region IDisposable

    private bool disposed = false;

    public void Dispose()
    {
        Dispose(true);
        GC.SuppressFinalize(this);
    }

    protected virtual void Dispose(bool disposing)
    {
        if (!disposed)
        {
            if (disposing)
            {
                // Free other state (managed objects).
                ((IDisposable)this.counterVMDataSource).Dispose();
            }
            // Free your own state (unmanaged objects).
            // Set large fields to null.
            disposed = true;
        }
    }

    // Use C# destructor syntax for finalization code.
    ~Counter()
    {
        Dispose(false);
    }
    
    #endregion
}
